@model ProfileViewModel
@{
    ViewData["Title"] = "Profile";
}
<head>
    <link rel="stylesheet" href="~/css/friendshiptoggle.css">
</head>
<div class="container emp-profile">
    <form method="GET" asp-action="Profile" asp-controller="User" >
        <div class="row">
            <div class="col-md-4">
                <section class="ppbio-bg">
                    <div class="profile-img">
                        @if (Model.User.First().ProfilePic is not null){
                            <img src="data:image/*;base64,@(Convert.ToBase64String(Model.User.First().ProfilePic))" alt="Profile picture" />
                        }
                        else
                        {
                            <img src="~/default-profile-pic.png" alt="Profile picture" />
                        }
                    </div>
                    <div id="bio">
                        <p>@Model.User.FirstOrDefault().Bio</p>
                    </div>
                </section>
            </div>
            <div class="col-md-7">
                <section class="content-bg">
                    <div class="profile-head">

                        <h5 id="profile-name">
                            @Model.User.FirstOrDefault().Name
                        </h5>

                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="timeline-tab" data-toggle="tab" href="#timeline" role="tab" aria-controls="timeline" aria-selected="true">Timeline</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="about-tab" data-toggle="tab" href="#about" role="tab" aria-controls="about" aria-selected="false">About</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="friends-tab" data-toggle="tab" href="#friends" role="tab" aria-controls="friends" aria-selected="false">Friends</a>
                            </li>
                            @if (Model.Friends.Any(u => u.UserID == Model.CurrentUserID))
                            {
                                <li class="nav-item ml-auto">
                                    <span id="friend-status">We're friends!</span>
                                </li>
                                <li class="nav-item">
                                    <label class="heart-switch" id="remove-friend-switch">
                                        <input type="checkbox" checked onChange="this.form.submit()">
                                        <svg viewBox="0 0 33 23" fill="white">
                                            <path d="M23.5,0.5 C28.4705627,0.5 32.5,4.52943725 32.5,9.5 C32.5,16.9484448 21.46672,22.5 16.5,22.5 C11.53328,22.5 0.5,16.9484448 0.5,9.5 C0.5,4.52952206 4.52943725,0.5 9.5,0.5 C12.3277083,0.5 14.8508336,1.80407476 16.5007741,3.84362242 C18.1491664,1.80407476 20.6722917,0.5 23.5,0.5 Z"></path>
                                        </svg>
                                    </label>
                                </li>
                            }
                            else if (Model.YouFriendRequestedThem == true)
                            {
                                <li class="nav-item ml-auto">
                                    <span id="friend-status">Request pending...</span>
                                </li>
                                <li class="nav-item">
                                    <label class="heart-switch" id="added-friend-switch" style=" --shadow: rgba(0, 0, 0, 0); --stroke-active: #ec4472; --fill-active: #ec638e;">
                                        <input type="submit">
                                        <svg viewBox="0 0 33 23" fill="white">
                                            <path d="M23.5,0.5 C28.4705627,0.5 32.5,4.52943725 32.5,9.5 C32.5,16.9484448 21.46672,22.5 16.5,22.5 C11.53328,22.5 0.5,16.9484448 0.5,9.5 C0.5,4.52952206 4.52943725,0.5 9.5,0.5 C12.3277083,0.5 14.8508336,1.80407476 16.5007741,3.84362242 C18.1491664,1.80407476 20.6722917,0.5 23.5,0.5 Z"></path>
                                        </svg>
                                    </label>
                                </li>
                            }
                            else if (Model.TheyFriendRequestedYou == true)
                            {
                                <li class="nav-item ml-auto">
                                    <span id="friend-status">Accept request </span>
                                </li>
                                <li class="nav-item">
                                    <label class="heart-switch" id="accept-friend-switch" style=" --shadow: rgba(0, 0, 0, 0); --stroke-active: #ec4472; --fill-active: #ec638e;">
                                        <input type="submit">
                                        <svg viewBox="0 0 33 23" fill="white">
                                            <path d="M23.5,0.5 C28.4705627,0.5 32.5,4.52943725 32.5,9.5 C32.5,16.9484448 21.46672,22.5 16.5,22.5 C11.53328,22.5 0.5,16.9484448 0.5,9.5 C0.5,4.52952206 4.52943725,0.5 9.5,0.5 C12.3277083,0.5 14.8508336,1.80407476 16.5007741,3.84362242 C18.1491664,1.80407476 20.6722917,0.5 23.5,0.5 Z"></path>
                                        </svg>
                                    </label>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item ml-auto">
                                    <span id="friend-status">Add me!</span>
                                </li>
                                <li class="nav-item">
                                    <label class="heart-switch" id="add-friend-switch" style=" --shadow: rgba(0, 0, 0, 0); --stroke-active: #ec4472; --fill-active: #ec638e;">
                                        <input type="submit">
                                        <svg viewBox="0 0 33 23" fill="white">
                                            <path d="M23.5,0.5 C28.4705627,0.5 32.5,4.52943725 32.5,9.5 C32.5,16.9484448 21.46672,22.5 16.5,22.5 C11.53328,22.5 0.5,16.9484448 0.5,9.5 C0.5,4.52952206 4.52943725,0.5 9.5,0.5 C12.3277083,0.5 14.8508336,1.80407476 16.5007741,3.84362242 C18.1491664,1.80407476 20.6722917,0.5 23.5,0.5 Z"></path>
                                        </svg>
                                    </label>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="col-auto">
                        <div class="tab-content profile-tab" id="myTabContent">
                            <div class="tab-pane fade show active" id="timeline" role="tabpanel" aria-labelledby="timeline-tab">
                                <div class="posts">
                                    <partial name="Posts" />
                                </div>
                                <div class="col-auto col-md-12">
                                    <div class="form-group">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="Posts" placeholder="Post..."></>
                                            <button id="postbtn" class="btn btn-primary shadow-none float-right" disabled onClick="this.form.submit()">SEND</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="about" role="tabpanel" aria-labelledby="about-tab">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label>Email</label>
                                    </div>
                                    <div class="col-md-6">
                                        <p id="email">@Model.User.FirstOrDefault().Email</p>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label>Phone</label>
                                    </div>
                                    <div class="col-md-6">
                                        <p id="phone">@Model.User.FirstOrDefault().Phone</p>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="friends" role="tabpanel" aria-labelledby="friends-tab">
                                <div class="row" id="friends-row">
                                    <partial name="Friends"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        var currentProfileID = window.location.pathname.split("/").pop(); //last part of url, which is the user id of any given profile
        var loggedInUserID;

        $(document).ready(function () {

            $.ajax({
                type: 'GET',
                url: '../../api/UserEntities/getUserID',
                success: function (result) {
                    loggedInUserID = result;
                }
            });

            //pass current profile ID to asp-route-userid for model refreshing
            $("form").attr("href", currentProfileID);

            if ($("#email").text() == "@User.Identity.Name") {
                $("#add-friend-switch").remove();
                $("#friend-status").remove();
            }

            $("#postbtn").click(function (event) {
                postPost();
            })

            //enable post button when text is entered
            $("#Posts").on("input", function (){
                if ($("#Posts").val() != "") {
                    $("#postbtn").css("background-color", "#e84a5f");
                    $("#postbtn").prop("disabled", false);
                } else {
                    $("#postbtn").css("background-color", "#2d2d2d");
                    $("#postbtn").prop("disabled", true);
                }
            });

            //save scroll position on scroll event
            $(window).scroll(function () {
                sessionStorage.scrollTop = $(this).scrollTop();
            });

            /*if scroll position has a value, set to value
            *note that this isn't best practice because the jump in scrolling is jarring for the user experience.
            *I chose this to maintain consistency between how the website updates friends and to use more mvc over jquery
            */
            if (sessionStorage.scrollTop != "undefined") {
                $(window).scrollTop(sessionStorage.scrollTop);
            }

            //save active tab
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                localStorage.setItem('activeTab', $(e.target).attr('href'));
            });

            //select last active tab
            var activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                $('.nav-tabs a[href="' + activeTab + '"]').tab('show');
            }

            //if not friends, send request
            $("#add-friend-switch").on("click", function () {
                var data = {
                    Friend1ID: loggedInUserID,
                    Friend2ID: currentProfileID
                };
                addFriend(data);
            });
            //if requested, accept
            $("#accept-friend-switch").on("click", function () {
                var data = {
                    Friend1ID: loggedInUserID,
                    Friend2ID: currentProfileID
                };
                acceptFriend(data);
            });
            //if request already sent
            $("#added-friend-switch").on("click", function () {
                //just for consistency
            });
            //if friends, remove friend
            $("#remove-friend-switch").on("click", function () {
                var data = {
                    Friend1ID: loggedInUserID,
                    Friend2ID: currentProfileID
                };
                removeFriend(data);
            });
        });

        function removeFriend(data) {
            $.ajax({
                type: 'POST',
                url: '../../api/UserEntities/removeFriend',
                contentType: 'application/json',
                dataType: 'text',
                data: JSON.stringify(data),
                success: function (result) {
                    $("#friend-status").text("Add me!");
                    $("#user-" + "@Model.CurrentUserID").remove();
                }
            });
            
        }

        function addFriend(data) {
            $.ajax({
                type: 'POST',
                url: '../../api/UserEntities/addFriend',
                contentType: 'application/json',
                dataType: 'text',
                data: JSON.stringify(data),
                success: function () {
                    $("#friend-status").text("Request sent!");
                }
            });
        }

        function acceptFriend(data) {
            $.ajax({
                type: 'POST',
                url: '../../api/UserEntities/acceptFriend',
                contentType: 'application/json',
                dataType: 'text',
                data: JSON.stringify(data),
                success: function () {
                    $("#friend-status").text("We're friends!");
                }
            });
        }

        function postPost() {
            var data = {
                PosterID: loggedInUserID,
                ReceiverID: currentProfileID,
                Content: $("#Posts").val()
            };

            return $.ajax({
                type: 'POST',
                url: '../../api/UserEntities/postOnTimeline',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(data)
            });
        }
    </script>
}